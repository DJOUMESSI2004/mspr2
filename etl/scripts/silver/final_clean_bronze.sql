-- Supprimer ancienne version si elle existe
DROP FUNCTION IF EXISTS silver.final_clean_bronze();
DROP TABLE IF EXISTS silver.covid_cleaned_final;

-- Cr√©er la version finale nettoy√©e et compl√©t√©e
CREATE OR REPLACE FUNCTION silver.final_clean_bronze()
RETURNS void AS $$
BEGIN
 /*
        ==============================================
        FONCTION : silver.final_clean_bronze()
        ==============================================
        Objectif :
        - G√©n√©rer une version propre et exploitable des donn√©es COVID-19
        - Pr√©parer un jeu de donn√©es pour l‚Äôapprentissage automatique
        - Nettoyer la couche Silver et cr√©er la table silver.covid_cleaned_final

        Raisons des choix :
        ---------------------
        1. Les colonnes marqu√©es "‚ùå √† exclure" ont √©t√© supprim√©es car :
           - Elles contenaient trop de valeurs nulles
           - Et leur importance pour la pr√©diction √©tait faible
           ‚Üí Cela √©vite du bruit et simplifie l‚Äôapprentissage

        2. Les colonnes marqu√©es "‚ö†Ô∏è utile mais taux NULL √©lev√©" ont √©t√© conserv√©es, 
           mais leurs valeurs NULL ont √©t√© **remplac√©es artificiellement** avec des 
           valeurs al√©atoires coh√©rentes (bornes r√©alistes) pour :
           - √âviter la perte d‚Äôinformation importante
           - Pouvoir continuer l‚Äôentra√Ænement du mod√®le m√™me sans vraie compl√©tion
           Ce choix est justifi√© ici car c‚Äôest un **projet d‚Äôexp√©rimentation p√©dagogique**
           et non une base de donn√©es utilis√©e en production r√©elle.

        3. Les colonnes "utiles" et "neutres" sont conserv√©es telles quelles.

         Ce nettoyage permet de produire une base pr√™te √† l‚Äôusage pour du ML supervis√©
           sans lignes manquantes ni colonnes inutiles.
    */

    -- Cr√©ation d‚Äôune table finale √† partir de silver.covid_cleaned
    CREATE TABLE silver.covid_cleaned_final AS
    SELECT
        -- M√©tadonn√©es essentielles
        iso_code,
        continent,
        country,
        date,

        -- ‚úÖ Colonnes utiles
        total_cases,
        new_cases,
        total_deaths,
        new_deaths,
        total_tests,
        positive_rate,
        tests_per_case,
        population,
        median_age,
        aged_65_older,
        aged_70_older,
        gdp_per_capita,
        human_development_index,
        life_expectancy,
        excess_mortality,

        -- ‚ö†Ô∏è Colonnes utiles mais avec beaucoup de NULL ‚Äî> compl√©tion artificielle
        COALESCE(reproduction_rate, ROUND((RANDOM() * 0.4 + 0.8)::numeric, 2)) AS reproduction_rate,
        COALESCE(icu_patients, ROUND((RANDOM() * 50)::numeric)) AS icu_patients,
        COALESCE(hosp_patients, ROUND((RANDOM() * 100)::numeric)) AS hosp_patients,
        COALESCE(new_tests, ROUND((RANDOM() * 10000)::numeric)) AS new_tests,
        COALESCE(total_vaccinations, ROUND((RANDOM() * 1000000)::numeric)) AS total_vaccinations,
        COALESCE(people_vaccinated, ROUND((RANDOM() * 800000)::numeric)) AS people_vaccinated,
        COALESCE(people_fully_vaccinated, ROUND((RANDOM() * 700000)::numeric)) AS people_fully_vaccinated,
        COALESCE(total_boosters, ROUND((RANDOM() * 400000)::numeric)) AS total_boosters,
        COALESCE(stringency_index, ROUND((RANDOM() * 100)::numeric, 2)) AS stringency_index,

        -- üîç Colonnes neutres gard√©es sans modification
        hospital_beds_per_thousand,
        extreme_poverty,
        new_vaccinations_smoothed,
        new_vaccinations_smoothed_per_million,
        new_people_vaccinated_smoothed,
        new_people_vaccinated_smoothed_per_hundred,
        total_cases_per_million,
        new_cases_per_million,
        total_deaths_per_million,
        new_deaths_per_million

    FROM silver.covid_cleaned;

    RAISE NOTICE '‚úÖ Table finale silver.covid_cleaned_final cr√©√©e avec succ√®s.';
END;
$$ LANGUAGE plpgsql;

-- Ex√©cuter pour cr√©er la table nettoy√©e finale
SELECT silver.final_clean_bronze();


-- checking de la nouvelle table
SELECT * FROM silver.covid_cleaned_final LIMIT 10;